{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","cuid","Translator","UppySocket","emitSocketProgress","getSocketHost","settle","limitPromises","buildResponseError","xhr","error","Error","data","request","module","exports","uppy","opts","type","id","title","defaultLocale","strings","timedOut","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","locale","timeout","limit","getResponseData","responseText","response","parsedResponse","JSON","parse","err","console","log","getResponseError","translator","i18n","translate","bind","handleUpload","limitUploads","fn","getOptions","file","state","xhrUpload","createProgressTimeout","timeoutHandler","self","onTimedOut","seconds","Math","ceil","aliveTimer","progress","done","setTimeout","clearTimeout","createFormDataUpload","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","createBareUpload","upload","current","total","resolve","reject","timer","abort","emit","XMLHttpRequest","addEventListener","ev","loaded","lengthComputable","uploader","bytesUploaded","bytesTotal","target","status","body","uploadURL","setFileState","name","open","toUpperCase","endpoint","header","setRequestHeader","send","on","removedFile","fileID","uploadRemote","fields","fetch","remote","url","credentials","stringify","size","fieldname","metadata","then","res","statusText","json","token","host","socket","progressData","resp","close","errData","message","cause","uploadBundle","files","i","emitError","uploadFiles","actions","map","parseInt","length","isRemote","promises","action","limitedAction","fileIDs","getFile","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('../core/Plugin')\nconst cuid = require('cuid')\nconst Translator = require('../core/Translator')\nconst UppySocket = require('../core/UppySocket')\nconst {\n  emitSocketProgress,\n  getSocketHost,\n  settle,\n  limitPromises\n} = require('../core/Utils')\n\nfunction buildResponseError (xhr, error) {\n  // No error message\n  if (!error) error = new Error('Upload error')\n  // Got an error message string\n  if (typeof error === 'string') error = new Error(error)\n  // Got something else\n  if (!(error instanceof Error)) {\n    error = Object.assign(new Error('Upload error'), { data: error })\n  }\n\n  error.request = xhr\n  return error\n}\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    const defaultLocale = {\n      strings: {\n        timedOut: 'Upload stalled for %{seconds} seconds, aborting.'\n      }\n    }\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: false,\n      headers: {},\n      locale: defaultLocale,\n      timeout: 30 * 1000,\n      limit: 0,\n      /**\n       * @typedef respObj\n       * @property {string} responseText\n       * @property {number} status\n       * @property {string} statusText\n       * @property {Object.<string, string>} headers\n       *\n       * @param {string} responseText the response body string\n       * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)\n       */\n      getResponseData (responseText, response) {\n        let parsedResponse = {}\n        try {\n          parsedResponse = JSON.parse(responseText)\n        } catch (err) {\n          console.log(err)\n        }\n\n        return parsedResponse\n      },\n      /**\n       *\n       * @param {string} responseText the response body string\n       * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)\n       */\n      getResponseError (responseText, response) {\n        return new Error('Upload error')\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.handleUpload = this.handleUpload.bind(this)\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (typeof this.opts.limit === 'number' && this.opts.limit !== 0) {\n      this.limitUploads = limitPromises(this.opts.limit)\n    } else {\n      this.limitUploads = (fn) => fn\n    }\n\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.')\n    }\n  }\n\n  getOptions (file) {\n    const opts = Object.assign({},\n      this.opts,\n      this.uppy.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n    opts.headers = {}\n    Object.assign(opts.headers, this.opts.headers)\n    if (this.uppy.state.xhrUpload) {\n      Object.assign(opts.headers, this.uppy.state.xhrUpload.headers)\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers)\n    }\n\n    return opts\n  }\n\n  // Helper to abort upload requests if there has not been any progress for `timeout` ms.\n  // Create an instance using `timer = createProgressTimeout(10000, onTimeout)`\n  // Call `timer.progress()` to signal that there has been progress of any kind.\n  // Call `timer.done()` when the upload has completed.\n  createProgressTimeout (timeout, timeoutHandler) {\n    const uppy = this.uppy\n    const self = this\n    function onTimedOut () {\n      uppy.log(`[XHRUpload] timed out`)\n      const error = new Error(self.i18n('timedOut', { seconds: Math.ceil(timeout / 1000) }))\n      timeoutHandler(error)\n    }\n\n    let aliveTimer = null\n    function progress () {\n      if (timeout > 0) {\n        done()\n        aliveTimer = setTimeout(onTimedOut, timeout)\n      }\n    }\n\n    function done () {\n      if (aliveTimer) {\n        clearTimeout(aliveTimer)\n        aliveTimer = null\n      }\n    }\n\n    return {\n      progress,\n      done\n    }\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = this.getOptions(file)\n\n    this.uppy.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const timer = this.createProgressTimeout(opts.timeout, (error) => {\n        xhr.abort()\n        this.uppy.emit('upload-error', file, error)\n        reject(error)\n      })\n\n      const xhr = new XMLHttpRequest()\n      const id = cuid()\n\n      xhr.upload.addEventListener('loadstart', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} started`)\n        // Begin checking for timeouts when loading starts.\n        timer.progress()\n      })\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`)\n        timer.progress()\n\n        if (ev.lengthComputable) {\n          this.uppy.emit('upload-progress', file, {\n            uploader: this,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} finished`)\n        timer.done()\n\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const body = opts.getResponseData(xhr.responseText, xhr)\n          const uploadURL = body[opts.responseUrlFieldName]\n\n          const response = {\n            status: ev.target.status,\n            body,\n            uploadURL\n          }\n\n          this.uppy.setFileState(file.id, { response })\n\n          this.uppy.emit('upload-success', file, body, uploadURL)\n\n          if (uploadURL) {\n            this.uppy.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          const body = opts.getResponseData(xhr.responseText, xhr)\n          const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr))\n\n          const response = {\n            status: ev.target.status,\n            body\n          }\n\n          this.uppy.setFileState(file.id, { response })\n\n          this.uppy.emit('upload-error', file, error)\n          return reject(error)\n        }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} errored`)\n        timer.done()\n\n        const error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr))\n        this.uppy.emit('upload-error', file, error)\n        return reject(error)\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.uppy.on('file-removed', (removedFile) => {\n        if (removedFile.id === file.id) {\n          timer.done()\n          xhr.abort()\n        }\n      })\n\n      this.uppy.on('upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          timer.done()\n          xhr.abort()\n        }\n      })\n\n      this.uppy.on('cancel-all', () => {\n        // const files = this.uppy.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = this.getOptions(file)\n    return new Promise((resolve, reject) => {\n      const fields = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n\n      metaFields.forEach((name) => {\n        fields[name] = file.meta[name]\n      })\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          metadata: fields,\n          headers: opts.headers\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            const resp = opts.getResponseData(data.response.responseText, data.response)\n            const uploadURL = resp[opts.responseUrlFieldName]\n            this.uppy.emit('upload-success', file, resp, uploadURL)\n            socket.close()\n            return resolve()\n          })\n\n          socket.on('error', (errData) => {\n            const resp = errData.response\n            const error = resp\n              ? opts.getResponseError(resp.responseText, resp)\n              : Object.assign(new Error(errData.error.message), { cause: errData.error })\n            this.uppy.emit('upload-error', file, error)\n            reject(error)\n          })\n        })\n      })\n    })\n  }\n\n  uploadBundle (files) {\n    return new Promise((resolve, reject) => {\n      const endpoint = this.opts.endpoint\n      const method = this.opts.method\n\n      const formData = new FormData()\n      files.forEach((file, i) => {\n        const opts = this.getOptions(file)\n        formData.append(opts.fieldName, file.data)\n      })\n\n      const xhr = new XMLHttpRequest()\n\n      const timer = this.createProgressTimeout(this.opts.timeout, (error) => {\n        xhr.abort()\n        emitError(error)\n        reject(error)\n      })\n\n      const emitError = (error) => {\n        files.forEach((file) => {\n          this.uppy.emit('upload-error', file, error)\n        })\n      }\n\n      xhr.upload.addEventListener('loadstart', (ev) => {\n        this.uppy.log('[XHRUpload] started uploading bundle')\n        timer.progress()\n      })\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        timer.progress()\n\n        if (!ev.lengthComputable) return\n\n        files.forEach((file) => {\n          this.uppy.emit('upload-progress', file, {\n            uploader: this,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        })\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        timer.done()\n\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = this.opts.getResponseData(xhr.responseText, xhr)\n          files.forEach((file) => {\n            this.uppy.emit('upload-success', file, resp)\n          })\n          return resolve()\n        }\n\n        const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error')\n        error.request = xhr\n        emitError(error)\n        return reject(error)\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        timer.done()\n\n        const error = this.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error')\n        emitError(error)\n        return reject(error)\n      })\n\n      this.uppy.on('cancel-all', () => {\n        xhr.abort()\n      })\n\n      xhr.open(method.toUpperCase(), endpoint, true)\n\n      Object.keys(this.opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, this.opts.headers[header])\n      })\n\n      xhr.send(formData)\n\n      files.forEach((file) => {\n        this.uppy.emit('upload-started', file)\n      })\n    })\n  }\n\n  uploadFiles (files) {\n    const actions = files.map((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.error) {\n        return () => Promise.reject(new Error(file.error))\n      } else if (file.isRemote) {\n        // We emit upload-started here, so that it's also emitted for files\n        // that have to wait due to the `limit` option.\n        this.uppy.emit('upload-started', file)\n        return this.uploadRemote.bind(this, file, current, total)\n      } else {\n        this.uppy.emit('upload-started', file)\n        return this.upload.bind(this, file, current, total)\n      }\n    })\n\n    const promises = actions.map((action) => {\n      const limitedAction = this.limitUploads(action)\n      return limitedAction()\n    })\n\n    return settle(promises)\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[XHRUpload] No files to upload!')\n      return Promise.resolve()\n    }\n\n    this.uppy.log('[XHRUpload] Uploading...')\n    const files = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n\n    if (this.opts.bundle) {\n      return this.uploadBundle(files)\n    }\n\n    return this.uploadFiles(files).then(() => null)\n  }\n\n  install () {\n    this.uppy.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"]}