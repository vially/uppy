{"version":3,"sources":["../../../src/plugins/ThumbnailGenerator/index.js"],"names":["Plugin","require","Utils","module","exports","uppy","opts","type","id","title","queue","queueProcessing","defaultOptions","thumbnailWidth","addToQueue","bind","onRestored","createThumbnail","file","targetWidth","originalUrl","URL","createObjectURL","data","onload","resolve","reject","image","Image","src","revokeObjectURL","onerror","Error","then","targetHeight","getProportionalHeight","canvas","resizeImage","canvasToBlob","blob","protect","ratio","width","height","maxSquare","maxSize","maxW","Math","floor","sqrt","maxH","round","document","createElement","getContext","drawImage","steps","ceil","log2","sW","pow","sH","x","quality","toBlob","dataURItoBlob","toDataURL","img","aspect","setPreviewURL","fileID","preview","files","state","setState","item","push","processQueue","length","current","shift","requestThumbnail","catch","isPreviewSupported","isRemote","console","warn","err","stack","message","fileIDs","Object","keys","getState","forEach","getFile","isRestored","test","install","on","uninstall","off"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\nconst Utils = require('../../core/Utils')\n/**\n * The Thumbnail Generator plugin\n *\n */\n\nmodule.exports = class ThumbnailGenerator extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'thumbnail'\n    this.id = 'ThumbnailGenerator'\n    this.title = 'Thumbnail Generator'\n    this.queue = []\n    this.queueProcessing = false\n\n    const defaultOptions = {\n      thumbnailWidth: 200\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.addToQueue = this.addToQueue.bind(this)\n    this.onRestored = this.onRestored.bind(this)\n  }\n\n  /**\n   * Create a thumbnail for the given Uppy file object.\n   *\n   * @param {{data: Blob}} file\n   * @param {number} width\n   * @return {Promise}\n   */\n  createThumbnail (file, targetWidth) {\n    const originalUrl = URL.createObjectURL(file.data)\n    const onload = new Promise((resolve, reject) => {\n      const image = new Image()\n      image.src = originalUrl\n      image.onload = () => {\n        URL.revokeObjectURL(originalUrl)\n        resolve(image)\n      }\n      image.onerror = () => {\n        // The onerror event is totally useless unfortunately, as far as I know\n        URL.revokeObjectURL(originalUrl)\n        reject(new Error('Could not create thumbnail'))\n      }\n    })\n\n    return onload\n      .then(image => {\n        const targetHeight = this.getProportionalHeight(image, targetWidth)\n        const canvas = this.resizeImage(image, targetWidth, targetHeight)\n        return this.canvasToBlob(canvas, 'image/png')\n      })\n      .then(blob => {\n        return URL.createObjectURL(blob)\n      })\n  }\n\n  /**\n   * Make sure the image doesnâ€™t exceed browser/device canvas limits.\n   * For ios with 256 RAM and ie\n   */\n  protect (image) {\n    // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\n\n    var ratio = image.width / image.height\n\n    var maxSquare = 5000000  // ios max canvas square\n    var maxSize = 4096  // ie max canvas dimensions\n\n    var maxW = Math.floor(Math.sqrt(maxSquare * ratio))\n    var maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio))\n    if (maxW > maxSize) {\n      maxW = maxSize\n      maxH = Math.round(maxW / ratio)\n    }\n    if (maxH > maxSize) {\n      maxH = maxSize\n      maxW = Math.round(ratio * maxH)\n    }\n    if (image.width > maxW) {\n      var canvas = document.createElement('canvas')\n      canvas.width = maxW\n      canvas.height = maxH\n      canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH)\n      image.src = 'about:blank'\n      image.width = 1\n      image.height = 1\n      image = canvas\n    }\n\n    return image\n  }\n\n  /**\n   * Resize an image to the target `width` and `height`.\n   *\n   * Returns a Canvas with the resized image on it.\n   */\n  resizeImage (image, targetWidth, targetHeight) {\n    // Resizing in steps refactored to use a solution from\n    // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01\n\n    image = this.protect(image)\n\n    var steps = Math.ceil(Math.log2(image.width / targetWidth))\n    if (steps < 1) {\n      steps = 1\n    }\n    var sW = targetWidth * Math.pow(2, steps - 1)\n    var sH = targetHeight * Math.pow(2, steps - 1)\n    var x = 2\n\n    while (steps--) {\n      var canvas = document.createElement('canvas')\n      canvas.width = sW\n      canvas.height = sH\n      canvas.getContext('2d').drawImage(image, 0, 0, sW, sH)\n      image = canvas\n\n      sW = Math.round(sW / x)\n      sH = Math.round(sH / x)\n    }\n\n    return image\n  }\n\n  /**\n   * Save a <canvas> element's content to a Blob object.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @return {Promise}\n   */\n  canvasToBlob (canvas, type, quality) {\n    if (canvas.toBlob) {\n      return new Promise(resolve => {\n        canvas.toBlob(resolve, type, quality)\n      })\n    }\n    return Promise.resolve().then(() => {\n      return Utils.dataURItoBlob(canvas.toDataURL(type, quality), {})\n    })\n  }\n\n  getProportionalHeight (img, width) {\n    const aspect = img.width / img.height\n    return Math.round(width / aspect)\n  }\n\n  /**\n   * Set the preview URL for a file.\n   */\n  setPreviewURL (fileID, preview) {\n    const { files } = this.uppy.state\n    this.uppy.setState({\n      files: Object.assign({}, files, {\n        [fileID]: Object.assign({}, files[fileID], {\n          preview: preview\n        })\n      })\n    })\n  }\n\n  addToQueue (item) {\n    this.queue.push(item)\n    if (this.queueProcessing === false) {\n      this.processQueue()\n    }\n  }\n\n  processQueue () {\n    this.queueProcessing = true\n    if (this.queue.length > 0) {\n      const current = this.queue.shift()\n      return this.requestThumbnail(current)\n        .catch(err => {}) // eslint-disable-line handle-callback-err\n        .then(() => this.processQueue())\n    } else {\n      this.queueProcessing = false\n    }\n  }\n\n  requestThumbnail (file) {\n    if (Utils.isPreviewSupported(file.type) && !file.isRemote) {\n      return this.createThumbnail(file, this.opts.thumbnailWidth)\n        .then(preview => {\n          this.setPreviewURL(file.id, preview)\n        })\n        .catch(err => {\n          console.warn(err.stack || err.message)\n        })\n    }\n    return Promise.resolve()\n  }\n\n  onRestored () {\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    fileIDs.forEach((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      if (!file.isRestored) return\n      // Only add blob URLs; they are likely invalid after being restored.\n      if (!file.preview || /^blob:/.test(file.preview)) {\n        this.addToQueue(file)\n      }\n    })\n  }\n\n  install () {\n    this.uppy.on('file-added', this.addToQueue)\n    this.uppy.on('restored', this.onRestored)\n  }\n  uninstall () {\n    this.uppy.off('file-added', this.addToQueue)\n    this.uppy.off('restored', this.onRestored)\n  }\n}\n"]}