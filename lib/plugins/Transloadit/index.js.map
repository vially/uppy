{"version":3,"sources":["../../../src/plugins/Transloadit/index.js"],"names":["Translator","require","Plugin","Tus","Client","StatusSocket","defaultGetAssemblyOptions","file","options","params","signature","fields","UPPY_SERVER","TL_UPPY_SERVER","module","exports","uppy","opts","type","id","title","defaultLocale","strings","creatingAssembly","creatingAssemblyFailed","encoding","defaultOptions","service","waitForEncoding","waitForMetadata","alwaysRunAssembly","importFromUploadURLs","getAssemblyOptions","locale","translator","i18n","translate","bind","prepareUpload","afterUpload","handleError","onFileUploadURLAvailable","onRestored","getPersistentData","validateParams","client","sockets","Error","JSON","parse","err","message","auth","key","fileIDs","normalizeAssemblyOptions","assemblyOptions","Array","isArray","fieldNames","forEach","fieldName","meta","all","map","fileID","getFile","promise","resolve","then","dedupeAssemblyOptions","list","dedupeMap","Object","create","stringify","push","keys","createAssembly","uploadID","pluginOptions","log","expectedFiles","length","assembly","state","getPluginState","assemblyList","uploadsAssemblies","concat","assembly_id","setPluginState","assemblies","attachAssemblyMetadata","tlMeta","assembly_url","filename","name","fieldname","tus","endpoint","tus_url","remote","test","newHost","uppyserver_url","path","url","replace","host","transloadit","newFile","files","setState","emit","connectSocket","catch","info","shouldWait","reserveFiles","reserveFile","addFile","findFile","uploadedFile","hasOwnProperty","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","onFileUploadComplete","assemblyId","getAssembly","onResult","stepName","result","original_id","localId","entry","results","onAssemblyFinished","getAssemblyStatus","setData","uploads","emitEventsDiff","prevState","emitMissedEvents","newUploads","filter","newResults","some","prev","newAssemblies","previousAssemblies","oldAssembly","diffAssemblyStatus","next","ok","upload_meta_data_extracted","error","pluginData","savedState","knownUploads","knownResults","loadAssemblies","assemblyIDs","assemblyID","reconnectSockets","restoreState","assembliesById","restored","newState","previousFiles","indexOf","socket","websocket_url","on","assembly_ssl_url","reject","mode","optionsPromise","allOptions","close","addResultData","finishedAssemblies","getAssemblyFiles","checkAllComplete","onAssemblyError","onImportError","removeListeners","off","install","addPreProcessor","addPostProcessor","use","resume","useFastRemoteRetry","metaFields","uninstall","removePreProcessor","removePostProcessor"],"mappings":"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","file":"index.js","sourcesContent":["const Translator = require('../../core/Translator')\nconst Plugin = require('../../core/Plugin')\nconst Tus = require('../Tus')\nconst Client = require('./Client')\nconst StatusSocket = require('./Socket')\n\nfunction defaultGetAssemblyOptions (file, options) {\n  return {\n    params: options.params,\n    signature: options.signature,\n    fields: options.fields\n  }\n}\n\nconst UPPY_SERVER = 'https://api2.transloadit.com/uppy-server'\n// Regex used to check if an uppy-server address is run by Transloadit.\nconst TL_UPPY_SERVER = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/uppy-server/\n\n/**\n * Upload files to Transloadit using Tus.\n */\nmodule.exports = class Transloadit extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'Transloadit'\n    this.title = 'Transloadit'\n\n    const defaultLocale = {\n      strings: {\n        creatingAssembly: 'Preparing upload...',\n        creatingAssemblyFailed: 'Transloadit: Could not create Assembly',\n        encoding: 'Encoding...'\n      }\n    }\n\n    const defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      signature: null,\n      params: null,\n      fields: {},\n      getAssemblyOptions: defaultGetAssemblyOptions,\n      locale: defaultLocale\n    }\n\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.prepareUpload = this.prepareUpload.bind(this)\n    this.afterUpload = this.afterUpload.bind(this)\n    this.handleError = this.handleError.bind(this)\n    this.onFileUploadURLAvailable = this.onFileUploadURLAvailable.bind(this)\n    this.onRestored = this.onRestored.bind(this)\n    this.getPersistentData = this.getPersistentData.bind(this)\n\n    if (this.opts.params) {\n      this.validateParams(this.opts.params)\n    }\n\n    this.client = new Client({\n      service: this.opts.service\n    })\n    this.sockets = {}\n  }\n\n  validateParams (params) {\n    if (!params) {\n      throw new Error('Transloadit: The `params` option is required.')\n    }\n\n    if (typeof params === 'string') {\n      try {\n        params = JSON.parse(params)\n      } catch (err) {\n        // Tell the user that this is not an Uppy bug!\n        err.message = 'Transloadit: The `params` option is a malformed JSON string: ' +\n          err.message\n        throw err\n      }\n    }\n\n    if (!params.auth || !params.auth.key) {\n      throw new Error('Transloadit: The `params.auth.key` option is required. ' +\n        'You can find your Transloadit API key at https://transloadit.com/accounts/credentials.')\n    }\n  }\n\n  getAssemblyOptions (fileIDs) {\n    const options = this.opts\n\n    const normalizeAssemblyOptions = (file, assemblyOptions) => {\n      if (Array.isArray(assemblyOptions.fields)) {\n        const fieldNames = assemblyOptions.fields\n        assemblyOptions.fields = {}\n        fieldNames.forEach((fieldName) => {\n          assemblyOptions.fields[fieldName] = file.meta[fieldName]\n        })\n      }\n      if (!assemblyOptions.fields) {\n        assemblyOptions.fields = {}\n      }\n      return assemblyOptions\n    }\n\n    return Promise.all(\n      fileIDs.map((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        const promise = Promise.resolve()\n          .then(() => options.getAssemblyOptions(file, options))\n          .then((assemblyOptions) => normalizeAssemblyOptions(file, assemblyOptions))\n        return promise.then((assemblyOptions) => {\n          this.validateParams(assemblyOptions.params)\n\n          return {\n            fileIDs: [fileID],\n            options: assemblyOptions\n          }\n        })\n      })\n    )\n  }\n\n  dedupeAssemblyOptions (list) {\n    const dedupeMap = Object.create(null)\n    list.forEach(({ fileIDs, options }) => {\n      const id = JSON.stringify(options)\n      if (dedupeMap[id]) {\n        dedupeMap[id].fileIDs.push(...fileIDs)\n      } else {\n        dedupeMap[id] = {\n          options,\n          fileIDs: [...fileIDs]\n        }\n      }\n    })\n\n    return Object.keys(dedupeMap).map((id) => dedupeMap[id])\n  }\n\n  createAssembly (fileIDs, uploadID, options) {\n    const pluginOptions = this.opts\n\n    this.uppy.log('[Transloadit] create Assembly')\n\n    return this.client.createAssembly({\n      params: options.params,\n      fields: options.fields,\n      expectedFiles: fileIDs.length,\n      signature: options.signature\n    }).then((assembly) => {\n      // Store the list of assemblies related to this upload.\n      const state = this.getPluginState()\n      const assemblyList = state.uploadsAssemblies[uploadID]\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies, {\n        [uploadID]: assemblyList.concat([ assembly.assembly_id ])\n      })\n\n      this.setPluginState({\n        assemblies: Object.assign(state.assemblies, {\n          [assembly.assembly_id]: assembly\n        }),\n        uploadsAssemblies\n      })\n\n      function attachAssemblyMetadata (file, assembly) {\n        // Attach meta parameters for the Tus plugin. See:\n        // https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n        const tlMeta = {\n          assembly_url: assembly.assembly_url,\n          filename: file.name,\n          fieldname: 'file'\n        }\n        const meta = Object.assign({}, file.meta, tlMeta)\n        // Add assembly-specific Tus endpoint.\n        const tus = Object.assign({}, file.tus, {\n          endpoint: assembly.tus_url\n        })\n\n        // Set uppy server location. We only add this, if 'file' has the attribute\n        // remote, because this is the criteria to identify remote files.\n        // We only replace the hostname for Transloadit's uppy-servers, so that\n        // people can self-host them while still using Transloadit for encoding.\n        let remote = file.remote\n        if (file.remote && TL_UPPY_SERVER.test(file.remote)) {\n          let newHost = assembly.uppyserver_url\n          let path = file.remote.url.replace(file.remote.host, '')\n          // remove tailing slash\n          newHost = newHost.replace(/\\/$/, '')\n          // remove leading slash\n          path = path.replace(/^\\//, '')\n\n          remote = Object.assign({}, file.remote, {\n            host: newHost,\n            url: `${newHost}/${path}`\n          })\n        }\n\n        const transloadit = {\n          assembly: assembly.assembly_id\n        }\n\n        const newFile = Object.assign({}, file, { transloadit })\n        // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n        if (!pluginOptions.importFromUploadURLs) {\n          Object.assign(newFile, { meta, tus, remote })\n        }\n        return newFile\n      }\n\n      const files = Object.assign({}, this.uppy.state.files)\n      fileIDs.forEach((id) => {\n        files[id] = attachAssemblyMetadata(files[id], assembly)\n      })\n\n      this.uppy.setState({ files })\n\n      this.uppy.emit('transloadit:assembly-created', assembly, fileIDs)\n\n      return this.connectSocket(assembly)\n        .then(() => assembly)\n    }).then((assembly) => {\n      this.uppy.log(`[Transloadit] Created Assembly ${assembly.assembly_id}`)\n      return assembly\n    }).catch((err) => {\n      this.uppy.info(this.i18n('creatingAssemblyFailed'), 'error', 0)\n\n      // Reject the promise.\n      throw err\n    })\n  }\n\n  shouldWait () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the assembly.\n   */\n  reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      return this.client.reserveFile(assembly, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the assembly\n   * once they have been fully uploaded.\n   */\n  onFileUploadURLAvailable (file) {\n    if (!file || !file.transloadit || !file.transloadit.assembly) {\n      return\n    }\n\n    const state = this.getPluginState()\n    const assembly = state.assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  findFile (uploadedFile) {\n    const files = this.uppy.state.files\n    for (const id in files) {\n      if (!files.hasOwnProperty(id)) {\n        continue\n      }\n      // Completed file upload.\n      if (files[id].uploadURL === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n      // In-progress file upload.\n      if (files[id].tus && files[id].tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return files[id]\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (files[id].name === uploadedFile.name && files[id].size === uploadedFile.size) {\n          return files[id]\n        }\n      }\n    }\n  }\n\n  onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process')\n      return\n    }\n    this.setPluginState({\n      files: Object.assign({}, state.files, {\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile\n        }\n      })\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry]\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  onAssemblyFinished (url) {\n    this.client.getAssemblyStatus(url).then((assembly) => {\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: Object.assign({}, state.assemblies, {\n          [assembly.assembly_id]: assembly\n        })\n      })\n      this.uppy.emit('transloadit:complete', assembly)\n    })\n  }\n\n  getPersistentData (setData) {\n    const state = this.getPluginState()\n    const assemblies = state.assemblies\n    const uploadsAssemblies = state.uploadsAssemblies\n    const uploads = Object.keys(state.files)\n    const results = state.results.map((result) => result.id)\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n        uploads,\n        results\n      }\n    })\n  }\n\n  /**\n   * Emit the necessary events that must have occured to get from the `prevState`,\n   * to the current state.\n   * For completed uploads, `transloadit:upload` is emitted.\n   * For new results, `transloadit:result` is emitted.\n   * For completed or errored assemblies, `transloadit:complete` or `transloadit:assembly-error` is emitted.\n   */\n  emitEventsDiff (prevState) {\n    const opts = this.opts\n    const state = this.getPluginState()\n\n    const emitMissedEvents = () => {\n      // Emit events for completed uploads and completed results\n      // that we've missed while we were away.\n      const newUploads = Object.keys(state.files).filter((fileID) => {\n        return !prevState.files.hasOwnProperty(fileID)\n      }).map((fileID) => state.files[fileID])\n      const newResults = state.results.filter((result) => {\n        return !prevState.results.some((prev) => prev.id === result.id)\n      })\n\n      this.uppy.log('[Transloadit] New fully uploaded files since restore:')\n      this.uppy.log(newUploads)\n      newUploads.forEach(({ assembly, uploadedFile }) => {\n        this.uppy.log(`[Transloadit]  emitting transloadit:upload ${uploadedFile.id}`)\n        this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assembly))\n      })\n      this.uppy.log('[Transloadit] New results since restore:')\n      this.uppy.log(newResults)\n      newResults.forEach(({ assembly, stepName, result, id }) => {\n        this.uppy.log(`[Transloadit]  emitting transloadit:result ${stepName}, ${id}`)\n        this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assembly))\n      })\n\n      const newAssemblies = state.assemblies\n      const previousAssemblies = prevState.assemblies\n      this.uppy.log('[Transloadit] Current Assembly status after restore')\n      this.uppy.log(newAssemblies)\n      this.uppy.log('[Transloadit] Assembly status before restore')\n      this.uppy.log(previousAssemblies)\n      Object.keys(newAssemblies).forEach((assemblyId) => {\n        const oldAssembly = previousAssemblies[assemblyId]\n        diffAssemblyStatus(oldAssembly, newAssemblies[assemblyId])\n      })\n    }\n\n    // Emit events for assemblies that have completed or errored while we were away.\n    const diffAssemblyStatus = (prev, next) => {\n      this.uppy.log('[Transloadit] Diff assemblies')\n      this.uppy.log(prev)\n      this.uppy.log(next)\n\n      if (opts.waitForEncoding && next.ok === 'ASSEMBLY_COMPLETED' && prev.ok !== 'ASSEMBLY_COMPLETED') {\n        this.uppy.log(`[Transloadit]  Emitting transloadit:complete for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:complete', next)\n      } else if (opts.waitForMetadata && next.upload_meta_data_extracted && !prev.upload_meta_data_extracted) {\n        this.uppy.log(`[Transloadit]  Emitting transloadit:complete after metadata extraction for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:complete', next)\n      }\n\n      if (next.error && !prev.error) {\n        this.uppy.log(`[Transloadit]  !!! Emitting transloadit:assembly-error for ${next.assembly_id}`)\n        this.uppy.log(next)\n        this.uppy.emit('transloadit:assembly-error', next, new Error(next.message))\n      }\n    }\n\n    emitMissedEvents()\n  }\n\n  onRestored (pluginData) {\n    const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const knownUploads = savedState.files || []\n    const knownResults = savedState.results || []\n    const previousAssemblies = savedState.assemblies || {}\n    const uploadsAssemblies = savedState.uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Fetch up-to-date assembly statuses.\n    const loadAssemblies = () => {\n      const assemblyIDs = []\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        assemblyIDs.push(...uploadsAssemblies[uploadID])\n      })\n\n      return Promise.all(\n        assemblyIDs.map((assemblyID) => {\n          const url = `https://api2.transloadit.com/assemblies/${assemblyID}`\n          return this.client.getAssemblyStatus(url)\n        })\n      )\n    }\n\n    const reconnectSockets = (assemblies) => {\n      return Promise.all(assemblies.map((assembly) => {\n        // No need to connect to the socket if the assembly has completed by now.\n        if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n          return null\n        }\n        return this.connectSocket(assembly)\n      }))\n    }\n\n    // Convert loaded assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies) => {\n      const assembliesById = {}\n      const files = {}\n      const results = []\n      assemblies.forEach((assembly) => {\n        assembliesById[assembly.assembly_id] = assembly\n\n        assembly.uploads.forEach((uploadedFile) => {\n          const file = this.findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: assembly.assembly_id,\n            uploadedFile\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(assembly.results).forEach((stepName) => {\n          assembly.results[stepName].forEach((result) => {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: assembly.assembly_id\n            })\n          })\n        })\n      })\n\n      this.setPluginState({\n        assemblies: assembliesById,\n        files: files,\n        results: results,\n        uploadsAssemblies: uploadsAssemblies\n      })\n    }\n\n    // Restore all assembly state.\n    this.restored = Promise.resolve()\n      .then(loadAssemblies)\n      .then((assemblies) => {\n        restoreState(assemblies)\n        return reconnectSockets(assemblies)\n      })\n      .then(() => {\n        // Return a callback that will be called by `afterUpload`\n        // once it has attached event listeners etc.\n        const newState = this.getPluginState()\n        const previousFiles = {}\n        knownUploads.forEach((id) => {\n          previousFiles[id] = newState.files[id]\n        })\n        return () => this.emitEventsDiff({\n          assemblies: previousAssemblies,\n          files: previousFiles,\n          results: newState.results.filter(({ id }) => knownResults.indexOf(id) !== -1),\n          uploadsAssemblies\n        })\n      })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  connectSocket (assembly) {\n    const socket = new StatusSocket(\n      assembly.websocket_url,\n      assembly\n    )\n    this.sockets[assembly.assembly_id] = socket\n\n    socket.on('upload', this.onFileUploadComplete.bind(this, assembly.assembly_id))\n    socket.on('error', (error) => {\n      this.uppy.emit('transloadit:assembly-error', assembly, error)\n    })\n\n    socket.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly)\n    })\n\n    if (this.opts.waitForEncoding) {\n      socket.on('result', this.onResult.bind(this, assembly.assembly_id))\n    }\n\n    if (this.opts.waitForEncoding) {\n      socket.on('finished', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    } else if (this.opts.waitForMetadata) {\n      socket.on('metadata', () => {\n        this.onAssemblyFinished(assembly.assembly_ssl_url)\n      })\n    }\n\n    return new Promise((resolve, reject) => {\n      socket.on('connect', resolve)\n      socket.on('error', reject)\n    }).then(() => {\n      this.uppy.log('[Transloadit] Socket is ready')\n    })\n  }\n\n  prepareUpload (fileIDs, uploadID) {\n    // Only use files without errors\n    fileIDs = fileIDs.filter((file) => !file.error)\n\n    fileIDs.forEach((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      this.uppy.emit('preprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('creatingAssembly')\n      })\n    })\n\n    const createAssembly = ({ fileIDs, options }) => {\n      return this.createAssembly(fileIDs, uploadID, options).then((assembly) => {\n        if (this.opts.importFromUploadURLs) {\n          return this.reserveFiles(assembly, fileIDs)\n        }\n      }).then(() => {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n        })\n      }).catch((err) => {\n        // Clear preprocessing state when the assembly could not be created,\n        // otherwise the UI gets confused about the lingering progress keys\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      })\n    }\n\n    const state = this.getPluginState()\n    const uploadsAssemblies = Object.assign({},\n      state.uploadsAssemblies,\n      { [uploadID]: [] })\n    this.setPluginState({ uploadsAssemblies })\n\n    let optionsPromise\n    if (fileIDs.length > 0) {\n      optionsPromise = Promise.resolve(this.getAssemblyOptions(fileIDs))\n        .then((allOptions) => this.dedupeAssemblyOptions(allOptions))\n    } else if (this.opts.alwaysRunAssembly) {\n      optionsPromise = Promise.resolve(\n        this.opts.getAssemblyOptions(null, this.opts)\n      ).then((options) => {\n        this.validateParams(options.params)\n        return [\n          { fileIDs, options }\n        ]\n      })\n    } else {\n      // If there are no files and we do not `alwaysRunAssembly`,\n      // don't do anything.\n      return Promise.resolve()\n    }\n\n    return optionsPromise.then(\n      (assemblies) => Promise.all(\n        assemblies.map(createAssembly)\n      ),\n      // If something went wrong before any assemblies could be created,\n      // clear all processing state.\n      (err) => {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      }\n    )\n  }\n\n  afterUpload (fileIDs, uploadID) {\n    // Only use files without errors\n    fileIDs = fileIDs.filter((file) => !file.error)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then((emitMissedEvents) => {\n        const promise = this.afterUpload(fileIDs, uploadID)\n        emitMissedEvents()\n        return promise\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.shouldWait()) {\n      assemblyIDs.forEach((assemblyID) => {\n        const socket = this.sockets[assemblyID]\n        socket.close()\n      })\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n      this.uppy.addResultData(uploadID, { transloadit: assemblies })\n      return Promise.resolve()\n    }\n\n    // If no assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, { transloadit: [] })\n      return Promise.resolve()\n    }\n\n    let finishedAssemblies = 0\n\n    return new Promise((resolve, reject) => {\n      fileIDs.forEach((fileID) => {\n        const file = this.uppy.getFile(fileID)\n        this.uppy.emit('postprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('encoding')\n        })\n      })\n\n      const onAssemblyFinished = (assembly) => {\n        // An assembly for a different upload just finished. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          this.uppy.log(`[Transloadit] afterUpload(): Ignoring finished Assembly ${assembly.assembly_id}`)\n          return\n        }\n        this.uppy.log(`[Transloadit] afterUpload(): Got Assembly finish ${assembly.assembly_id}`)\n\n        // TODO set the `file.uploadURL` to a result?\n        // We will probably need an option here so the plugin user can tell us\n        // which result to pick…?\n\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          this.uppy.emit('postprocess-complete', file)\n        })\n\n        checkAllComplete()\n      }\n\n      const onAssemblyError = (assembly, error) => {\n        // An assembly for a different upload just errored. We can ignore it.\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          this.uppy.log(`[Transloadit] afterUpload(): Ignoring errored Assembly ${assembly.assembly_id}`)\n          return\n        }\n        this.uppy.log(`[Transloadit] afterUpload(): Got Assembly error ${assembly.assembly_id}`)\n        this.uppy.log(error)\n\n        // Clear postprocessing state for all our files.\n        const files = this.getAssemblyFiles(assembly.assembly_id)\n        files.forEach((file) => {\n          // TODO Maybe make a postprocess-error event here?\n          this.uppy.emit('upload-error', file, error)\n\n          this.uppy.emit('postprocess-complete', file)\n        })\n\n        checkAllComplete()\n      }\n\n      const onImportError = (assembly, fileID, error) => {\n        if (assemblyIDs.indexOf(assembly.assembly_id) === -1) {\n          return\n        }\n\n        // Not sure if we should be doing something when it's just one file failing.\n        // ATM, the only options are 1) ignoring or 2) failing the entire upload.\n        // I think failing the upload is better than silently ignoring.\n        // In the future we should maybe have a way to resolve uploads with some failures,\n        // like returning an object with `{ successful, failed }` uploads.\n        onAssemblyError(assembly, error)\n      }\n\n      const checkAllComplete = () => {\n        finishedAssemblies += 1\n        if (finishedAssemblies === assemblyIDs.length) {\n          // We're done, these listeners can be removed\n          removeListeners()\n          const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n          this.uppy.addResultData(uploadID, { transloadit: assemblies })\n          resolve()\n        }\n      }\n\n      const removeListeners = () => {\n        this.uppy.off('transloadit:complete', onAssemblyFinished)\n        this.uppy.off('transloadit:assembly-error', onAssemblyError)\n        this.uppy.off('transloadit:import-error', onImportError)\n      }\n\n      this.uppy.on('transloadit:complete', onAssemblyFinished)\n      this.uppy.on('transloadit:assembly-error', onAssemblyError)\n      this.uppy.on('transloadit:import-error', onImportError)\n    }).then((result) => {\n      // Clean up uploadID → assemblyIDs, they're no longer going to be used anywhere.\n      const state = this.getPluginState()\n      const uploadsAssemblies = Object.assign({}, state.uploadsAssemblies)\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n\n      return result\n    })\n  }\n\n  handleError (err, uploadID) {\n    this.uppy.log('[Transloadit] handleError')\n    this.uppy.log(err)\n    this.uppy.log(uploadID)\n    const state = this.getPluginState()\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    assemblyIDs.forEach((assemblyID) => {\n      if (this.sockets[assemblyID]) {\n        this.sockets[assemblyID].close()\n      }\n    })\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.prepareUpload)\n    this.uppy.addPostProcessor(this.afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.handleError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.onFileUploadURLAvailable)\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to the same assembly.\n        resume: false,\n        // Disable Uppy Server's retry optimisation; we need to change the endpoint on retry\n        // so it can't just reuse the same tus.Upload instance server-side.\n        useFastRemoteRetry: false,\n        // Only send assembly metadata to the tus endpoint.\n        metaFields: ['assembly_url', 'filename', 'fieldname']\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.getPersistentData)\n    this.uppy.on('restored', this.onRestored)\n\n    this.setPluginState({\n      // Contains assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: []\n    })\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.prepareUpload)\n    this.uppy.removePostProcessor(this.afterUpload)\n    this.uppy.off('error', this.handleError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.onFileUploadURLAvailable)\n    }\n  }\n\n  getAssembly (id) {\n    const state = this.getPluginState()\n    return state.assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    const fileIDs = Object.keys(this.uppy.state.files)\n    return fileIDs.map((fileID) => {\n      return this.uppy.getFile(fileID)\n    }).filter((file) => {\n      return file && file.transloadit && file.transloadit.assembly === assemblyID\n    })\n  }\n}\n\nmodule.exports.UPPY_SERVER = UPPY_SERVER\n"]}