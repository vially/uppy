{"version":3,"sources":["../../../src/plugins/StatusBar/index.js"],"names":["Plugin","require","Translator","StatusBarUI","statusBarStates","getSpeed","getBytesRemaining","prettyETA","prettyBytes","module","exports","uppy","opts","id","title","type","defaultLocale","strings","uploading","complete","uploadFailed","pleasePressRetry","paused","error","retry","cancel","pressToRetry","retryUpload","resumeUpload","cancelUpload","pauseUpload","filesUploadedOfTotal","dataUploadedOfTotal","xTimeLeft","uploadXFiles","uploadXNewFiles","defaultOptions","target","hideUploadButton","showProgressDetails","locale","hideAfterFinish","translator","i18n","translate","bind","startUpload","render","install","getTotalSpeed","files","totalSpeed","forEach","file","progress","getTotalETA","totalBytesRemaining","reduce","total","Math","round","upload","catch","err","log","stack","message","getUploadingState","isAllErrored","isAllComplete","STATE_ERROR","STATE_COMPLETE","state","STATE_WAITING","fileIDs","Object","keys","i","length","uploadStarted","uploadComplete","STATE_UPLOADING","preprocess","STATE_PREPROCESSING","postprocess","STATE_POSTPROCESSING","uploadStartedFiles","filter","newFiles","completeFiles","erroredFiles","inProgressFiles","isPaused","processingFiles","inProgressFilesArray","map","totalETA","totalSize","totalUploadedSize","bytesTotal","bytesUploaded","isUploadStarted","totalProgress","isAllPaused","resumableUploads","capabilities","uploadState","inProgress","pauseAll","resumeAll","retryAll","cancelAll","mount","uninstall","unmount"],"mappings":"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","file":"index.js","sourcesContent":["const Plugin = require('../../core/Plugin')\nconst Translator = require('../../core/Translator')\nconst StatusBarUI = require('./StatusBar')\nconst statusBarStates = require('./StatusBarStates')\nconst { getSpeed } = require('../../core/Utils')\nconst { getBytesRemaining } = require('../../core/Utils')\nconst { prettyETA } = require('../../core/Utils')\nconst prettyBytes = require('prettier-bytes')\n\n/**\n * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,\n * progress percentage and time remaining.\n */\nmodule.exports = class StatusBar extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.id = this.opts.id || 'StatusBar'\n    this.title = 'StatusBar'\n    this.type = 'progressindicator'\n\n    const defaultLocale = {\n      strings: {\n        uploading: 'Uploading',\n        complete: 'Complete',\n        uploadFailed: 'Upload failed',\n        pleasePressRetry: 'Please press Retry to upload again',\n        paused: 'Paused',\n        error: 'Error',\n        retry: 'Retry',\n        cancel: 'Cancel',\n        pressToRetry: 'Press to retry',\n        retryUpload: 'Retry upload',\n        resumeUpload: 'Resume upload',\n        cancelUpload: 'Cancel upload',\n        pauseUpload: 'Pause upload',\n        filesUploadedOfTotal: {\n          0: '%{complete} of %{smart_count} file uploaded',\n          1: '%{complete} of %{smart_count} files uploaded'\n        },\n        dataUploadedOfTotal: '%{complete} of %{total}',\n        xTimeLeft: '%{time} left',\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        }\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      target: 'body',\n      hideUploadButton: false,\n      showProgressDetails: false,\n      locale: defaultLocale,\n      hideAfterFinish: true\n    }\n\n    // merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.startUpload = this.startUpload.bind(this)\n    this.render = this.render.bind(this)\n    this.install = this.install.bind(this)\n  }\n\n  getTotalSpeed (files) {\n    let totalSpeed = 0\n    files.forEach((file) => {\n      totalSpeed = totalSpeed + getSpeed(file.progress)\n    })\n    return totalSpeed\n  }\n\n  getTotalETA (files) {\n    const totalSpeed = this.getTotalSpeed(files)\n    if (totalSpeed === 0) {\n      return 0\n    }\n\n    const totalBytesRemaining = files.reduce((total, file) => {\n      return total + getBytesRemaining(file.progress)\n    }, 0)\n\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10\n  }\n\n  startUpload () {\n    return this.uppy.upload().catch((err) => {\n      this.uppy.log(err.stack || err.message || err)\n      // Ignore\n    })\n  }\n\n  getUploadingState (isAllErrored, isAllComplete, files) {\n    if (isAllErrored) {\n      return statusBarStates.STATE_ERROR\n    }\n\n    if (isAllComplete) {\n      return statusBarStates.STATE_COMPLETE\n    }\n\n    let state = statusBarStates.STATE_WAITING\n    const fileIDs = Object.keys(files)\n    for (let i = 0; i < fileIDs.length; i++) {\n      const progress = files[fileIDs[i]].progress\n      // If ANY files are being uploaded right now, show the uploading state.\n      if (progress.uploadStarted && !progress.uploadComplete) {\n        return statusBarStates.STATE_UPLOADING\n      }\n      // If files are being preprocessed AND postprocessed at this time, we show the\n      // preprocess state. If any files are being uploaded we show uploading.\n      if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {\n        state = statusBarStates.STATE_PREPROCESSING\n      }\n      // If NO files are being preprocessed or uploaded right now, but some files are\n      // being postprocessed, show the postprocess state.\n      if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {\n        state = statusBarStates.STATE_POSTPROCESSING\n      }\n    }\n    return state\n  }\n\n  render (state) {\n    const files = state.files\n\n    const uploadStartedFiles = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const newFiles = Object.keys(files).filter((file) => {\n      return !files[file].progress.uploadStarted &&\n        !files[file].progress.preprocess &&\n        !files[file].progress.postprocess\n    })\n    const completeFiles = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadComplete\n    })\n    const erroredFiles = Object.keys(files).filter((file) => {\n      return files[file].error\n    })\n    const inProgressFiles = Object.keys(files).filter((file) => {\n      return !files[file].progress.uploadComplete &&\n             files[file].progress.uploadStarted &&\n             !files[file].isPaused\n    })\n    const processingFiles = Object.keys(files).filter((file) => {\n      return files[file].progress.preprocess || files[file].progress.postprocess\n    })\n\n    let inProgressFilesArray = inProgressFiles.map((file) => {\n      return files[file]\n    })\n\n    const totalSpeed = prettyBytes(this.getTotalSpeed(inProgressFilesArray))\n    const totalETA = prettyETA(this.getTotalETA(inProgressFilesArray))\n\n    // total size and uploaded size\n    let totalSize = 0\n    let totalUploadedSize = 0\n    inProgressFilesArray.forEach((file) => {\n      totalSize = totalSize + (file.progress.bytesTotal || 0)\n      totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0)\n    })\n    totalSize = prettyBytes(totalSize)\n    totalUploadedSize = prettyBytes(totalUploadedSize)\n\n    const isUploadStarted = uploadStartedFiles.length > 0\n\n    const isAllComplete = state.totalProgress === 100 &&\n      completeFiles.length === Object.keys(files).length &&\n      processingFiles.length === 0\n\n    const isAllErrored = isUploadStarted &&\n      erroredFiles.length === uploadStartedFiles.length\n\n    const isAllPaused = inProgressFiles.length === 0 &&\n      !isAllComplete &&\n      !isAllErrored &&\n      uploadStartedFiles.length > 0\n\n    const resumableUploads = state.capabilities.resumableUploads || false\n\n    return StatusBarUI({\n      error: state.error,\n      uploadState: this.getUploadingState(isAllErrored, isAllComplete, state.files || {}),\n      totalProgress: state.totalProgress,\n      totalSize: totalSize,\n      totalUploadedSize: totalUploadedSize,\n      uploadStarted: uploadStartedFiles.length,\n      isAllComplete: isAllComplete,\n      isAllPaused: isAllPaused,\n      isAllErrored: isAllErrored,\n      isUploadStarted: isUploadStarted,\n      complete: completeFiles.length,\n      newFiles: newFiles.length,\n      inProgress: inProgressFiles.length,\n      totalSpeed: totalSpeed,\n      totalETA: totalETA,\n      files: state.files,\n      i18n: this.i18n,\n      pauseAll: this.uppy.pauseAll,\n      resumeAll: this.uppy.resumeAll,\n      retryAll: this.uppy.retryAll,\n      cancelAll: this.uppy.cancelAll,\n      startUpload: this.startUpload,\n      resumableUploads: resumableUploads,\n      showProgressDetails: this.opts.showProgressDetails,\n      hideUploadButton: this.opts.hideUploadButton,\n      hideAfterFinish: this.opts.hideAfterFinish\n    })\n  }\n\n  install () {\n    const target = this.opts.target\n    if (target) {\n      this.mount(target, this)\n    }\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}