{"version":3,"sources":["../../src/server/Provider.js"],"names":["RequestClient","require","_getName","id","split","map","s","charAt","toUpperCase","slice","join","module","exports","uppy","opts","provider","authProvider","name","checkAuth","get","then","payload","authenticated","authUrl","hostname","fileUrl","list","directory","logout","redirect","location","href"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,gBAAgBC,QAAQ,iBAAR,CAAtB;AACAA,QAAQ,cAAR;;AAEA,IAAMC,WAAW,SAAXA,QAAW,CAACC,EAAD,EAAQ;AACvB,SAAOA,GAAGC,KAAH,CAAS,GAAT,EAAcC,GAAd,CAAkB,UAACC,CAAD;AAAA,WAAOA,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,EAAEG,KAAF,CAAQ,CAAR,CAAnC;AAAA,GAAlB,EAAiEC,IAAjE,CAAsE,GAAtE,CAAP;AACD,CAFD;;AAIAC,OAAOC,OAAP;AAAA;;AACE,oBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AAAA,iDACvB,0BAAMD,IAAN,EAAYC,IAAZ,CADuB;;AAEvB,UAAKC,QAAL,GAAgBD,KAAKC,QAArB;AACA,UAAKZ,EAAL,GAAU,MAAKY,QAAf;AACA,UAAKC,YAAL,GAAoBF,KAAKE,YAAL,IAAqB,MAAKD,QAA9C;AACA,UAAKE,IAAL,GAAY,MAAKH,IAAL,CAAUG,IAAV,IAAkBf,SAAS,MAAKC,EAAd,CAA9B;AALuB;AAMxB;;AAPH,qBASEe,SATF,wBASe;AACX,WAAO,KAAKC,GAAL,CAAY,KAAKhB,EAAjB,kBACJiB,IADI,CACC,UAACC,OAAD,EAAa;AACjB,aAAOA,QAAQC,aAAf;AACD,KAHI,CAAP;AAID,GAdH;;AAAA,qBAgBEC,OAhBF,sBAgBa;AACT,WAAU,KAAKC,QAAf,SAA2B,KAAKrB,EAAhC;AACD,GAlBH;;AAAA,qBAoBEsB,OApBF,oBAoBWtB,EApBX,EAoBe;AACX,WAAU,KAAKqB,QAAf,SAA2B,KAAKrB,EAAhC,aAA0CA,EAA1C;AACD,GAtBH;;AAAA,qBAwBEuB,IAxBF,iBAwBQC,SAxBR,EAwBmB;AACf,WAAO,KAAKR,GAAL,CAAY,KAAKhB,EAAjB,eAA4BwB,aAAa,EAAzC,EAAP;AACD,GA1BH;;AAAA,qBA4BEC,MA5BF,qBA4BoC;AAAA,QAA1BC,QAA0B,uEAAfC,SAASC,IAAM;;AAChC,WAAO,KAAKZ,GAAL,CAAY,KAAKhB,EAAjB,yBAAuC0B,QAAvC,CAAP;AACD,GA9BH;;AAAA;AAAA,EAAwC7B,aAAxC","file":"Provider.js","sourcesContent":["'use strict'\n\nconst RequestClient = require('./RequestClient')\nrequire('whatwg-fetch')\n\nconst _getName = (id) => {\n  return id.split('-').map((s) => s.charAt(0).toUpperCase() + s.slice(1)).join(' ')\n}\n\nmodule.exports = class Provider extends RequestClient {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.provider = opts.provider\n    this.id = this.provider\n    this.authProvider = opts.authProvider || this.provider\n    this.name = this.opts.name || _getName(this.id)\n  }\n\n  checkAuth () {\n    return this.get(`${this.id}/authorized`)\n      .then((payload) => {\n        return payload.authenticated\n      })\n  }\n\n  authUrl () {\n    return `${this.hostname}/${this.id}/connect`\n  }\n\n  fileUrl (id) {\n    return `${this.hostname}/${this.id}/get/${id}`\n  }\n\n  list (directory) {\n    return this.get(`${this.id}/list/${directory || ''}`)\n  }\n\n  logout (redirect = location.href) {\n    return this.get(`${this.id}/logout?redirect=${redirect}`)\n  }\n}\n"]}