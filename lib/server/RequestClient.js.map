{"version":3,"sources":["../../src/server/RequestClient.js"],"names":["require","module","exports","uppy","opts","onReceiveResponse","bind","response","uppyServer","state","host","headers","has","get","setState","path","fetch","hostname","method","credentials","then","res","json","post","data","body","JSON","stringify"],"mappings":"AAAA;;;;;;;;AAEAA,QAAQ,cAAR;;AAEAC,OAAOC,OAAP;AACE,yBAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAAA;;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AALH,0BAaED,iBAbF,8BAaqBE,QAbrB,EAa+B;AAC3B,QAAMC,aAAa,KAAKL,IAAL,CAAUM,KAAV,CAAgBD,UAAhB,IAA8B,EAAjD;AACA,QAAME,OAAO,KAAKN,IAAL,CAAUM,IAAvB;AACA,QAAMC,UAAUJ,SAASI,OAAzB;AACA;AACA,QAAIA,QAAQC,GAAR,CAAY,MAAZ,KAAuBD,QAAQE,GAAR,CAAY,MAAZ,MAAwBL,WAAWE,IAAX,CAAnD,EAAqE;AAAA;;AACnE,WAAKP,IAAL,CAAUW,QAAV,CAAmB;AACjBN,oBAAY,SAAc,EAAd,EAAkBA,UAAlB,6BACTE,IADS,IACFC,QAAQE,GAAR,CAAY,MAAZ,CADE;AADK,OAAnB;AAKD;AACD,WAAON,QAAP;AACD,GA1BH;;AAAA,0BA4BEM,GA5BF,gBA4BOE,IA5BP,EA4Ba;AACT,WAAOC,MAAS,KAAKC,QAAd,SAA0BF,IAA1B,EAAkC;AACvCG,cAAQ,KAD+B;AAEvCC,mBAAa,SAF0B;AAGvCR,eAAS;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT;AAH8B,KAAlC;AAQL;AARK,KASJS,IATI,CASC,KAAKf,iBATN,EAUJe,IAVI,CAUC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,EAAT;AAAA,KAVD,CAAP;AAWD,GAxCH;;AAAA,0BA0CEC,IA1CF,iBA0CQR,IA1CR,EA0CcS,IA1Cd,EA0CoB;AAChB,WAAOR,MAAS,KAAKC,QAAd,SAA0BF,IAA1B,EAAkC;AACvCG,cAAQ,MAD+B;AAEvCC,mBAAa,SAF0B;AAGvCR,eAAS;AACP,kBAAU,kBADH;AAEP,wBAAgB;AAFT,OAH8B;AAOvCc,YAAMC,KAAKC,SAAL,CAAeH,IAAf;AAPiC,KAAlC,EASJJ,IATI,CASC,KAAKf,iBATN;AAUL;AAVK,KAWJe,IAXI,CAWC,UAACC,GAAD;AAAA,aAASA,IAAIC,IAAJ,EAAT;AAAA,KAXD,CAAP;AAYD,GAvDH;;AAAA;AAAA;AAAA,wBAOkB;AACd,UAAMd,aAAa,KAAKL,IAAL,CAAUM,KAAV,CAAgBD,UAAhB,IAA8B,EAAjD;AACA,UAAME,OAAO,KAAKN,IAAL,CAAUM,IAAvB;AACA,aAAOF,WAAWE,IAAX,KAAoBA,IAA3B;AACD;AAXH;;AAAA;AAAA","file":"RequestClient.js","sourcesContent":["'use strict'\n\nrequire('whatwg-fetch')\n\nmodule.exports = class RequestClient {\n  constructor (uppy, opts) {\n    this.uppy = uppy\n    this.opts = opts\n    this.onReceiveResponse = this.onReceiveResponse.bind(this)\n  }\n\n  get hostname () {\n    const uppyServer = this.uppy.state.uppyServer || {}\n    const host = this.opts.host\n    return uppyServer[host] || host\n  }\n\n  onReceiveResponse (response) {\n    const uppyServer = this.uppy.state.uppyServer || {}\n    const host = this.opts.host\n    const headers = response.headers\n    // Store the self-identified domain name for the uppy-server we just hit.\n    if (headers.has('i-am') && headers.get('i-am') !== uppyServer[host]) {\n      this.uppy.setState({\n        uppyServer: Object.assign({}, uppyServer, {\n          [host]: headers.get('i-am')\n        })\n      })\n    }\n    return response\n  }\n\n  get (path) {\n    return fetch(`${this.hostname}/${path}`, {\n      method: 'get',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    })\n      // @todo validate response status before calling json\n      .then(this.onReceiveResponse)\n      .then((res) => res.json())\n  }\n\n  post (path, data) {\n    return fetch(`${this.hostname}/${path}`, {\n      method: 'post',\n      credentials: 'include',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    })\n      .then(this.onReceiveResponse)\n      // @todo validate response status before calling json\n      .then((res) => res.json())\n  }\n}\n"]}