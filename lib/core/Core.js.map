{"version":3,"sources":["../../src/core/Core.js"],"names":["Utils","require","Translator","ee","cuid","throttle","prettyBytes","match","DefaultStore","Uppy","opts","defaultLocale","strings","youCanOnlyUploadX","youHaveToAtLeastSelectX","exceedsSize","youCanOnlyUploadFileTypes","uppyServerError","failedToUpload","noInternetConnection","connectedToInternet","noFilesFound","defaultOptions","id","autoProceed","debug","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","meta","onBeforeFileAdded","currentFile","files","onBeforeUpload","locale","store","translator","i18n","translate","bind","plugins","getState","getPlugin","setFileMeta","setFileState","log","info","hideInfo","addFile","removeFile","pauseResume","_calculateProgress","updateOnlineStatus","resetProgress","pauseAll","resumeAll","retryAll","cancelAll","retryUpload","upload","emitter","on","off","once","emit","preProcessors","uploaders","postProcessors","setState","currentUploads","capabilities","resumableUploads","totalProgress","isHidden","type","message","_storeUnsubscribe","subscribe","prevState","nextState","patch","updateAll","window","_addListeners","event","callback","state","iteratePlugins","plugin","update","fileID","defaultProgress","percentage","bytesUploaded","uploadComplete","uploadStarted","updatedFiles","Object","keys","forEach","updatedFile","progress","addPreProcessor","fn","push","removePreProcessor","i","indexOf","splice","addPostProcessor","removePostProcessor","addUploader","removeUploader","setMeta","data","updatedMeta","newMeta","getFile","getFiles","map","_checkMinNumberOfFiles","length","Error","smart_count","_checkRestrictions","file","isCorrectFileType","filter","extension","substr","allowedFileTypesString","join","size","onError","msg","err","onBeforeFileAddedResult","then","TypeError","fileType","getFileType","fileName","name","split","fileExtension","getFileNameAndExtension","isRemote","generateFileID","newFile","source","bytesTotal","remote","preview","scheduledAutoProceed","setTimeout","catch","console","error","stack","removedFile","updatedUploads","removeUploads","uploadID","newFileIDs","fileIDs","uploadFileID","_removeUpload","_calculateTotalProgress","isObjectURL","URL","revokeObjectURL","wasPaused","isPaused","inProgressUpdatedFiles","filesToRetry","_createUpload","_runUpload","uploadIDs","reset","Math","floor","toFixed","inProgress","progressMax","progressAll","details","Date","now","_throttledCalculateProgress","leading","trailing","uploadResp","uploadURL","preprocess","postprocess","addEventListener","online","navigator","onLine","wasOffline","getID","use","Plugin","pluginId","existsPluginAlready","install","foundPlugin","pluginName","method","pluginType","removePlugin","instance","list","uninstall","index","close","duration","isComplexMessage","clearTimeout","infoTimeoutID","undefined","newInfo","getTimeStamp","warn","dir","run","restore","reject","step","result","_getUpload","addResultData","currentUpload","uploadData","restoreStep","steps","lastStep","resolve","successful","failed","uploader","onBeforeUploadResult","currentlyUploadingFiles","reduce","prev","curr","concat","waitingFileIDs","module","exports"],"mappings":"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","file":"Core.js","sourcesContent":["const Utils = require('../core/Utils')\nconst Translator = require('../core/Translator')\nconst ee = require('namespace-emitter')\nconst cuid = require('cuid')\nconst throttle = require('lodash.throttle')\nconst prettyBytes = require('prettier-bytes')\nconst match = require('mime-match')\nconst DefaultStore = require('../store/DefaultStore')\n\n/**\n * Uppy Core module.\n * Manages plugins, state updates, acts as an event bus,\n * adds/removes files and metadata.\n */\nclass Uppy {\n  /**\n  * Instantiate Uppy\n  * @param {object} opts — Uppy options\n  */\n  constructor (opts) {\n    const defaultLocale = {\n      strings: {\n        youCanOnlyUploadX: {\n          0: 'You can only upload %{smart_count} file',\n          1: 'You can only upload %{smart_count} files'\n        },\n        youHaveToAtLeastSelectX: {\n          0: 'You have to select at least %{smart_count} file',\n          1: 'You have to select at least %{smart_count} files'\n        },\n        exceedsSize: 'This file exceeds maximum allowed size of',\n        youCanOnlyUploadFileTypes: 'You can only upload:',\n        uppyServerError: 'Connection with Uppy Server failed',\n        failedToUpload: 'Failed to upload',\n        noInternetConnection: 'No Internet connection',\n        connectedToInternet: 'Connected to the Internet',\n        noFilesFound: 'You have no files or folders here'\n      }\n    }\n\n    // set default options\n    const defaultOptions = {\n      id: 'uppy',\n      autoProceed: true,\n      debug: false,\n      restrictions: {\n        maxFileSize: null,\n        maxNumberOfFiles: null,\n        minNumberOfFiles: null,\n        allowedFileTypes: null\n      },\n      meta: {},\n      onBeforeFileAdded: (currentFile, files) => currentFile,\n      onBeforeUpload: (files) => files,\n      locale: defaultLocale,\n      store: DefaultStore()\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.opts.restrictions = Object.assign({}, defaultOptions.restrictions, this.opts.restrictions)\n\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({locale: this.locale})\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    // Container for different types of plugins\n    this.plugins = {}\n\n    this.getState = this.getState.bind(this)\n    this.getPlugin = this.getPlugin.bind(this)\n    this.setFileMeta = this.setFileMeta.bind(this)\n    this.setFileState = this.setFileState.bind(this)\n    this.log = this.log.bind(this)\n    this.info = this.info.bind(this)\n    this.hideInfo = this.hideInfo.bind(this)\n    this.addFile = this.addFile.bind(this)\n    this.removeFile = this.removeFile.bind(this)\n    this.pauseResume = this.pauseResume.bind(this)\n    this._calculateProgress = this._calculateProgress.bind(this)\n    this.updateOnlineStatus = this.updateOnlineStatus.bind(this)\n    this.resetProgress = this.resetProgress.bind(this)\n\n    this.pauseAll = this.pauseAll.bind(this)\n    this.resumeAll = this.resumeAll.bind(this)\n    this.retryAll = this.retryAll.bind(this)\n    this.cancelAll = this.cancelAll.bind(this)\n    this.retryUpload = this.retryUpload.bind(this)\n    this.upload = this.upload.bind(this)\n\n    this.emitter = ee()\n    this.on = this.on.bind(this)\n    this.off = this.off.bind(this)\n    this.once = this.emitter.once.bind(this.emitter)\n    this.emit = this.emitter.emit.bind(this.emitter)\n\n    this.preProcessors = []\n    this.uploaders = []\n    this.postProcessors = []\n\n    this.store = this.opts.store\n    this.setState({\n      plugins: {},\n      files: {},\n      currentUploads: {},\n      capabilities: {\n        resumableUploads: false\n      },\n      totalProgress: 0,\n      meta: Object.assign({}, this.opts.meta),\n      info: {\n        isHidden: true,\n        type: 'info',\n        message: ''\n      }\n    })\n\n    this._storeUnsubscribe = this.store.subscribe((prevState, nextState, patch) => {\n      this.emit('state-update', prevState, nextState, patch)\n      this.updateAll(nextState)\n    })\n\n    // for debugging and testing\n    // this.updateNum = 0\n    if (this.opts.debug && typeof window !== 'undefined') {\n      window['uppyLog'] = ''\n      window[this.opts.id] = this\n    }\n\n    this._addListeners()\n  }\n\n  on (event, callback) {\n    this.emitter.on(event, callback)\n    return this\n  }\n\n  off (event, callback) {\n    this.emitter.off(event, callback)\n    return this\n  }\n\n  /**\n   * Iterate on all plugins and run `update` on them.\n   * Called each time state changes.\n   *\n   */\n  updateAll (state) {\n    this.iteratePlugins(plugin => {\n      plugin.update(state)\n    })\n  }\n\n  /**\n   * Updates state with a patch\n   *\n   * @param {object} patch {foo: 'bar'}\n   */\n  setState (patch) {\n    this.store.setState(patch)\n  }\n\n  /**\n   * Returns current state.\n   * @return {object}\n   */\n  getState () {\n    return this.store.getState()\n  }\n\n  /**\n  * Back compat for when this.state is used instead of this.getState().\n  */\n  get state () {\n    return this.getState()\n  }\n\n  /**\n  * Shorthand to set state for a specific file.\n  */\n  setFileState (fileID, state) {\n    this.setState({\n      files: Object.assign({}, this.getState().files, {\n        [fileID]: Object.assign({}, this.getState().files[fileID], state)\n      })\n    })\n  }\n\n  resetProgress () {\n    const defaultProgress = {\n      percentage: 0,\n      bytesUploaded: 0,\n      uploadComplete: false,\n      uploadStarted: false\n    }\n    const files = Object.assign({}, this.getState().files)\n    const updatedFiles = {}\n    Object.keys(files).forEach(fileID => {\n      const updatedFile = Object.assign({}, files[fileID])\n      updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress)\n      updatedFiles[fileID] = updatedFile\n    })\n\n    this.setState({\n      files: updatedFiles,\n      totalProgress: 0\n    })\n\n    // TODO Document on the website\n    this.emit('reset-progress')\n  }\n\n  addPreProcessor (fn) {\n    this.preProcessors.push(fn)\n  }\n\n  removePreProcessor (fn) {\n    const i = this.preProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.preProcessors.splice(i, 1)\n    }\n  }\n\n  addPostProcessor (fn) {\n    this.postProcessors.push(fn)\n  }\n\n  removePostProcessor (fn) {\n    const i = this.postProcessors.indexOf(fn)\n    if (i !== -1) {\n      this.postProcessors.splice(i, 1)\n    }\n  }\n\n  addUploader (fn) {\n    this.uploaders.push(fn)\n  }\n\n  removeUploader (fn) {\n    const i = this.uploaders.indexOf(fn)\n    if (i !== -1) {\n      this.uploaders.splice(i, 1)\n    }\n  }\n\n  setMeta (data) {\n    const updatedMeta = Object.assign({}, this.getState().meta, data)\n    const updatedFiles = Object.assign({}, this.getState().files)\n\n    Object.keys(updatedFiles).forEach((fileID) => {\n      updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n        meta: Object.assign({}, updatedFiles[fileID].meta, data)\n      })\n    })\n\n    this.log('Adding metadata:')\n    this.log(data)\n\n    this.setState({\n      meta: updatedMeta,\n      files: updatedFiles\n    })\n  }\n\n  setFileMeta (fileID, data) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    if (!updatedFiles[fileID]) {\n      this.log('Was trying to set metadata for a file that’s not with us anymore: ', fileID)\n      return\n    }\n    const newMeta = Object.assign({}, updatedFiles[fileID].meta, data)\n    updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {\n      meta: newMeta\n    })\n    this.setState({files: updatedFiles})\n  }\n\n  /**\n   * Get a file object.\n   *\n   * @param {string} fileID The ID of the file object to return.\n   */\n  getFile (fileID) {\n    return this.getState().files[fileID]\n  }\n\n  /**\n   * Get all files in an array.\n   */\n  getFiles () {\n    const { files } = this.getState()\n    return Object.keys(files).map((fileID) => files[fileID])\n  }\n\n  /**\n  * Check if minNumberOfFiles restriction is reached before uploading.\n  *\n  * @private\n  */\n  _checkMinNumberOfFiles (files) {\n    const {minNumberOfFiles} = this.opts.restrictions\n    if (Object.keys(files).length < minNumberOfFiles) {\n      throw new Error(`${this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles })}`)\n    }\n  }\n\n  /**\n  * Check if file passes a set of restrictions set in options: maxFileSize,\n  * maxNumberOfFiles and allowedFileTypes.\n  *\n  * @param {object} file object to check\n  * @private\n  */\n  _checkRestrictions (file) {\n    const {maxFileSize, maxNumberOfFiles, allowedFileTypes} = this.opts.restrictions\n\n    if (maxNumberOfFiles) {\n      if (Object.keys(this.getState().files).length + 1 > maxNumberOfFiles) {\n        throw new Error(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\n      }\n    }\n\n    if (allowedFileTypes) {\n      const isCorrectFileType = allowedFileTypes.filter((type) => {\n        // if (!file.type) return false\n\n        // is this is a mime-type\n        if (type.indexOf('/') > -1) {\n          if (!file.type) return false\n          return match(file.type, type)\n        }\n\n        // otherwise this is likely an extension\n        if (type[0] === '.') {\n          if (file.extension === type.substr(1)) {\n            return file.extension\n          }\n        }\n      }).length > 0\n\n      if (!isCorrectFileType) {\n        const allowedFileTypesString = allowedFileTypes.join(', ')\n        throw new Error(`${this.i18n('youCanOnlyUploadFileTypes')} ${allowedFileTypesString}`)\n      }\n    }\n\n    if (maxFileSize) {\n      if (file.data.size > maxFileSize) {\n        throw new Error(`${this.i18n('exceedsSize')} ${prettyBytes(maxFileSize)}`)\n      }\n    }\n  }\n\n  /**\n  * Add a new file to `state.files`. This will run `onBeforeFileAdded`,\n  * try to guess file type in a clever way, check file against restrictions,\n  * and start an upload if `autoProceed === true`.\n  *\n  * @param {object} file object to add\n  */\n  addFile (file) {\n    const { files } = this.getState()\n\n    const onError = (msg) => {\n      const err = typeof msg === 'object' ? msg : new Error(msg)\n      this.log(err.message)\n      this.info(err.message, 'error', 5000)\n      throw err\n    }\n\n    const onBeforeFileAddedResult = this.opts.onBeforeFileAdded(file, files)\n\n    if (onBeforeFileAddedResult === false) {\n      this.log('Not adding file because onBeforeFileAdded returned false')\n      return\n    }\n\n    if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult) {\n      // warning after the change in 0.24\n      if (onBeforeFileAddedResult.then) {\n        throw new TypeError('onBeforeFileAdded() returned a Promise, but this is no longer supported. It must be synchronous.')\n      }\n      file = onBeforeFileAddedResult\n    }\n\n    const fileType = Utils.getFileType(file)\n    let fileName\n    if (file.name) {\n      fileName = file.name\n    } else if (fileType.split('/')[0] === 'image') {\n      fileName = fileType.split('/')[0] + '.' + fileType.split('/')[1]\n    } else {\n      fileName = 'noname'\n    }\n    const fileExtension = Utils.getFileNameAndExtension(fileName).extension\n    const isRemote = file.isRemote || false\n\n    const fileID = Utils.generateFileID(file)\n\n    const meta = file.meta || {}\n    meta.name = fileName\n    meta.type = fileType\n\n    const newFile = {\n      source: file.source || '',\n      id: fileID,\n      name: fileName,\n      extension: fileExtension || '',\n      meta: Object.assign({}, this.getState().meta, meta),\n      type: fileType,\n      data: file.data,\n      progress: {\n        percentage: 0,\n        bytesUploaded: 0,\n        bytesTotal: file.data.size || 0,\n        uploadComplete: false,\n        uploadStarted: false\n      },\n      size: file.data.size || 0,\n      isRemote: isRemote,\n      remote: file.remote || '',\n      preview: file.preview\n    }\n\n    try {\n      this._checkRestrictions(newFile)\n    } catch (err) {\n      onError(err)\n    }\n\n    this.setState({\n      files: Object.assign({}, files, {\n        [fileID]: newFile\n      })\n    })\n\n    this.emit('file-added', newFile)\n    this.log(`Added file: ${fileName}, ${fileID}, mime type: ${fileType}`)\n\n    if (this.opts.autoProceed && !this.scheduledAutoProceed) {\n      this.scheduledAutoProceed = setTimeout(() => {\n        this.scheduledAutoProceed = null\n        this.upload().catch((err) => {\n          console.error(err.stack || err.message || err)\n        })\n      }, 4)\n    }\n  }\n\n  removeFile (fileID) {\n    const { files, currentUploads } = this.state\n    const updatedFiles = Object.assign({}, files)\n    const removedFile = updatedFiles[fileID]\n    delete updatedFiles[fileID]\n\n    // Remove this file from its `currentUpload`.\n    const updatedUploads = Object.assign({}, currentUploads)\n    const removeUploads = []\n    Object.keys(updatedUploads).forEach((uploadID) => {\n      const newFileIDs = currentUploads[uploadID].fileIDs.filter((uploadFileID) => uploadFileID !== fileID)\n      // Remove the upload if no files are associated with it anymore.\n      if (newFileIDs.length === 0) {\n        removeUploads.push(uploadID)\n        return\n      }\n\n      updatedUploads[uploadID] = Object.assign({}, currentUploads[uploadID], {\n        fileIDs: newFileIDs\n      })\n    })\n\n    this.setState({\n      currentUploads: updatedUploads,\n      files: updatedFiles\n    })\n\n    removeUploads.forEach((uploadID) => {\n      this._removeUpload(uploadID)\n    })\n\n    this._calculateTotalProgress()\n    this.emit('file-removed', removedFile)\n    this.log(`File removed: ${removedFile.id}`)\n\n    // Clean up object URLs.\n    if (removedFile.preview && Utils.isObjectURL(removedFile.preview)) {\n      URL.revokeObjectURL(removedFile.preview)\n    }\n\n    this.log(`Removed file: ${fileID}`)\n  }\n\n  pauseResume (fileID) {\n    if (this.getFile(fileID).uploadComplete) return\n\n    const wasPaused = this.getFile(fileID).isPaused || false\n    const isPaused = !wasPaused\n\n    this.setFileState(fileID, {\n      isPaused: isPaused\n    })\n\n    this.emit('upload-pause', fileID, isPaused)\n\n    return isPaused\n  }\n\n  pauseAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: true\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('pause-all')\n  }\n\n  resumeAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const inProgressUpdatedFiles = Object.keys(updatedFiles).filter((file) => {\n      return !updatedFiles[file].progress.uploadComplete &&\n             updatedFiles[file].progress.uploadStarted\n    })\n\n    inProgressUpdatedFiles.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({files: updatedFiles})\n\n    this.emit('resume-all')\n  }\n\n  retryAll () {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const filesToRetry = Object.keys(updatedFiles).filter(file => {\n      return updatedFiles[file].error\n    })\n\n    filesToRetry.forEach((file) => {\n      const updatedFile = Object.assign({}, updatedFiles[file], {\n        isPaused: false,\n        error: null\n      })\n      updatedFiles[file] = updatedFile\n    })\n    this.setState({\n      files: updatedFiles,\n      error: null\n    })\n\n    this.emit('retry-all', filesToRetry)\n\n    const uploadID = this._createUpload(filesToRetry)\n    return this._runUpload(uploadID)\n  }\n\n  cancelAll () {\n    this.emit('cancel-all')\n\n    // TODO Or should we just call removeFile on all files?\n    const { currentUploads } = this.getState()\n    const uploadIDs = Object.keys(currentUploads)\n\n    uploadIDs.forEach((id) => {\n      this._removeUpload(id)\n    })\n\n    this.setState({\n      files: {},\n      totalProgress: 0\n    })\n  }\n\n  retryUpload (fileID) {\n    const updatedFiles = Object.assign({}, this.getState().files)\n    const updatedFile = Object.assign({}, updatedFiles[fileID],\n      { error: null, isPaused: false }\n    )\n    updatedFiles[fileID] = updatedFile\n    this.setState({\n      files: updatedFiles\n    })\n\n    this.emit('upload-retry', fileID)\n\n    const uploadID = this._createUpload([ fileID ])\n    return this._runUpload(uploadID)\n  }\n\n  reset () {\n    this.cancelAll()\n  }\n\n  _calculateProgress (file, data) {\n    if (!this.getFile(file.id)) {\n      this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n      return\n    }\n\n    this.setFileState(file.id, {\n      progress: Object.assign({}, this.getFile(file.id).progress, {\n        bytesUploaded: data.bytesUploaded,\n        bytesTotal: data.bytesTotal,\n        percentage: Math.floor((data.bytesUploaded / data.bytesTotal * 100).toFixed(2))\n      })\n    })\n\n    this._calculateTotalProgress()\n  }\n\n  _calculateTotalProgress () {\n    // calculate total progress, using the number of files currently uploading,\n    // multiplied by 100 and the summ of individual progress of each file\n    const files = Object.assign({}, this.getState().files)\n\n    const inProgress = Object.keys(files).filter((file) => {\n      return files[file].progress.uploadStarted\n    })\n    const progressMax = inProgress.length * 100\n    let progressAll = 0\n    inProgress.forEach((file) => {\n      progressAll = progressAll + files[file].progress.percentage\n    })\n\n    const totalProgress = progressMax === 0 ? 0 : Math.floor((progressAll * 100 / progressMax).toFixed(2))\n\n    this.setState({\n      totalProgress: totalProgress\n    })\n  }\n\n  /**\n   * Registers listeners for all global actions, like:\n   * `error`, `file-removed`, `upload-progress`\n   */\n  _addListeners () {\n    this.on('error', (error) => {\n      this.setState({ error: error.message })\n    })\n\n    this.on('upload-error', (file, error) => {\n      this.setFileState(file.id, { error: error.message })\n      this.setState({ error: error.message })\n\n      let message\n      message = `${this.i18n('failedToUpload')} ${file.name}`\n      if (typeof error === 'object' && error.message) {\n        message = { message: message, details: error.message }\n      }\n      this.info(message, 'error', 5000)\n    })\n\n    this.on('upload', () => {\n      this.setState({ error: null })\n    })\n\n    this.on('upload-started', (file, upload) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: {\n          uploadStarted: Date.now(),\n          uploadComplete: false,\n          percentage: 0,\n          bytesUploaded: 0,\n          bytesTotal: file.size\n        }\n      })\n    })\n\n    // upload progress events can occur frequently, especially when you have a good\n    // connection to the remote server. Therefore, we are throtteling them to\n    // prevent accessive function calls.\n    // see also: https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb\n    const _throttledCalculateProgress = throttle(this._calculateProgress, 100, { leading: true, trailing: true })\n\n    this.on('upload-progress', _throttledCalculateProgress)\n\n    this.on('upload-success', (file, uploadResp, uploadURL) => {\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getFile(file.id).progress, {\n          uploadComplete: true,\n          percentage: 100\n        }),\n        uploadURL: uploadURL,\n        isPaused: false\n      })\n\n      this._calculateTotalProgress()\n    })\n\n    this.on('preprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getFile(file.id).progress, {\n          preprocess: progress\n        })\n      })\n    })\n\n    this.on('preprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = Object.assign({}, this.getState().files)\n      files[file.id] = Object.assign({}, files[file.id], {\n        progress: Object.assign({}, files[file.id].progress)\n      })\n      delete files[file.id].progress.preprocess\n\n      this.setState({ files: files })\n    })\n\n    this.on('postprocess-progress', (file, progress) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      this.setFileState(file.id, {\n        progress: Object.assign({}, this.getState().files[file.id].progress, {\n          postprocess: progress\n        })\n      })\n    })\n\n    this.on('postprocess-complete', (file) => {\n      if (!this.getFile(file.id)) {\n        this.log(`Not setting progress for a file that has been removed: ${file.id}`)\n        return\n      }\n      const files = Object.assign({}, this.getState().files)\n      files[file.id] = Object.assign({}, files[file.id], {\n        progress: Object.assign({}, files[file.id].progress)\n      })\n      delete files[file.id].progress.postprocess\n      // TODO should we set some kind of `fullyComplete` property on the file object\n      // so it's easier to see that the file is upload…fully complete…rather than\n      // what we have to do now (`uploadComplete && !postprocess`)\n\n      this.setState({ files: files })\n    })\n\n    this.on('restored', () => {\n      // Files may have changed--ensure progress is still accurate.\n      this._calculateTotalProgress()\n    })\n\n    // show informer if offline\n    if (typeof window !== 'undefined') {\n      window.addEventListener('online', () => this.updateOnlineStatus())\n      window.addEventListener('offline', () => this.updateOnlineStatus())\n      setTimeout(() => this.updateOnlineStatus(), 3000)\n    }\n  }\n\n  updateOnlineStatus () {\n    const online =\n      typeof window.navigator.onLine !== 'undefined'\n        ? window.navigator.onLine\n        : true\n    if (!online) {\n      this.emit('is-offline')\n      this.info(this.i18n('noInternetConnection'), 'error', 0)\n      this.wasOffline = true\n    } else {\n      this.emit('is-online')\n      if (this.wasOffline) {\n        this.emit('back-online')\n        this.info(this.i18n('connectedToInternet'), 'success', 3000)\n        this.wasOffline = false\n      }\n    }\n  }\n\n  getID () {\n    return this.opts.id\n  }\n\n  /**\n   * Registers a plugin with Core.\n   *\n   * @param {object} Plugin object\n   * @param {object} [opts] object with options to be passed to Plugin\n   * @return {Object} self for chaining\n   */\n  use (Plugin, opts) {\n    if (typeof Plugin !== 'function') {\n      let msg = `Expected a plugin class, but got ${Plugin === null ? 'null' : typeof Plugin}.` +\n        ' Please verify that the plugin was imported and spelled correctly.'\n      throw new TypeError(msg)\n    }\n\n    // Instantiate\n    const plugin = new Plugin(this, opts)\n    const pluginId = plugin.id\n    this.plugins[plugin.type] = this.plugins[plugin.type] || []\n\n    if (!pluginId) {\n      throw new Error('Your plugin must have an id')\n    }\n\n    if (!plugin.type) {\n      throw new Error('Your plugin must have a type')\n    }\n\n    let existsPluginAlready = this.getPlugin(pluginId)\n    if (existsPluginAlready) {\n      let msg = `Already found a plugin named '${existsPluginAlready.id}'. ` +\n        `Tried to use: '${pluginId}'.\\n` +\n        `Uppy plugins must have unique 'id' options. See https://uppy.io/docs/plugins/#id.`\n      throw new Error(msg)\n    }\n\n    this.plugins[plugin.type].push(plugin)\n    plugin.install()\n\n    return this\n  }\n\n  /**\n   * Find one Plugin by name.\n   *\n   * @param {string} name description\n   * @return {object | boolean}\n   */\n  getPlugin (name) {\n    let foundPlugin = null\n    this.iteratePlugins((plugin) => {\n      const pluginName = plugin.id\n      if (pluginName === name) {\n        foundPlugin = plugin\n        return false\n      }\n    })\n    return foundPlugin\n  }\n\n  /**\n   * Iterate through all `use`d plugins.\n   *\n   * @param {function} method that will be run on each plugin\n   */\n  iteratePlugins (method) {\n    Object.keys(this.plugins).forEach(pluginType => {\n      this.plugins[pluginType].forEach(method)\n    })\n  }\n\n  /**\n   * Uninstall and remove a plugin.\n   *\n   * @param {object} instance The plugin instance to remove.\n   */\n  removePlugin (instance) {\n    const list = this.plugins[instance.type]\n\n    if (instance.uninstall) {\n      instance.uninstall()\n    }\n\n    const index = list.indexOf(instance)\n    if (index !== -1) {\n      list.splice(index, 1)\n    }\n  }\n\n  /**\n   * Uninstall all plugins and close down this Uppy instance.\n   */\n  close () {\n    this.reset()\n\n    this._storeUnsubscribe()\n\n    this.iteratePlugins((plugin) => {\n      plugin.uninstall()\n    })\n  }\n\n  /**\n  * Set info message in `state.info`, so that UI plugins like `Informer`\n  * can display the message.\n  *\n  * @param {string | object} message Message to be displayed by the informer\n  * @param {string} [type]\n  * @param {number} [duration]\n  */\n\n  info (message, type = 'info', duration = 3000) {\n    const isComplexMessage = typeof message === 'object'\n\n    this.setState({\n      info: {\n        isHidden: false,\n        type: type,\n        message: isComplexMessage ? message.message : message,\n        details: isComplexMessage ? message.details : null\n      }\n    })\n\n    this.emit('info-visible')\n\n    clearTimeout(this.infoTimeoutID)\n    if (duration === 0) {\n      this.infoTimeoutID = undefined\n      return\n    }\n\n    // hide the informer after `duration` milliseconds\n    this.infoTimeoutID = setTimeout(this.hideInfo, duration)\n  }\n\n  hideInfo () {\n    const newInfo = Object.assign({}, this.getState().info, {\n      isHidden: true\n    })\n    this.setState({\n      info: newInfo\n    })\n    this.emit('info-hidden')\n  }\n\n  /**\n   * Logs stuff to console, only if `debug` is set to true. Silent in production.\n   *\n   * @param {String|Object} msg to log\n   * @param {String} [type] optional `error` or `warning`\n   */\n  log (msg, type) {\n    if (!this.opts.debug) {\n      return\n    }\n\n    let message = `[Uppy] [${Utils.getTimeStamp()}] ${msg}`\n\n    window['uppyLog'] = window['uppyLog'] + '\\n' + 'DEBUG LOG: ' + msg\n\n    if (type === 'error') {\n      console.error(message)\n      return\n    }\n\n    if (type === 'warning') {\n      console.warn(message)\n      return\n    }\n\n    if (msg === `${msg}`) {\n      console.log(message)\n    } else {\n      message = `[Uppy] [${Utils.getTimeStamp()}]`\n      console.log(message)\n      console.dir(msg)\n    }\n  }\n\n  /**\n   * Obsolete, event listeners are now added in the constructor.\n   */\n  run () {\n    this.log('Calling run() is no longer necessary.', 'warning')\n    return this\n  }\n\n  /**\n   * Restore an upload by its ID.\n   */\n  restore (uploadID) {\n    this.log(`Core: attempting to restore upload \"${uploadID}\"`)\n\n    if (!this.getState().currentUploads[uploadID]) {\n      this._removeUpload(uploadID)\n      return Promise.reject(new Error('Nonexistent upload'))\n    }\n\n    return this._runUpload(uploadID)\n  }\n\n  /**\n   * Create an upload for a bunch of files.\n   *\n   * @param {Array<string>} fileIDs File IDs to include in this upload.\n   * @return {string} ID of this upload.\n   */\n  _createUpload (fileIDs) {\n    const uploadID = cuid()\n\n    this.emit('upload', {\n      id: uploadID,\n      fileIDs: fileIDs\n    })\n\n    this.setState({\n      currentUploads: Object.assign({}, this.getState().currentUploads, {\n        [uploadID]: {\n          fileIDs: fileIDs,\n          step: 0,\n          result: {}\n        }\n      })\n    })\n\n    return uploadID\n  }\n\n  _getUpload (uploadID) {\n    return this.getState().currentUploads[uploadID]\n  }\n\n  /**\n   * Add data to an upload's result object.\n   *\n   * @param {string} uploadID The ID of the upload.\n   * @param {object} data Data properties to add to the result object.\n   */\n  addResultData (uploadID, data) {\n    if (!this._getUpload(uploadID)) {\n      this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n      return\n    }\n    const currentUploads = this.getState().currentUploads\n    const currentUpload = Object.assign({}, currentUploads[uploadID], {\n      result: Object.assign({}, currentUploads[uploadID].result, data)\n    })\n    this.setState({\n      currentUploads: Object.assign({}, currentUploads, {\n        [uploadID]: currentUpload\n      })\n    })\n  }\n\n  /**\n   * Remove an upload, eg. if it has been canceled or completed.\n   *\n   * @param {string} uploadID The ID of the upload.\n   */\n  _removeUpload (uploadID) {\n    const currentUploads = Object.assign({}, this.getState().currentUploads)\n    delete currentUploads[uploadID]\n\n    this.setState({\n      currentUploads: currentUploads\n    })\n  }\n\n  /**\n   * Run an upload. This picks up where it left off in case the upload is being restored.\n   *\n   * @private\n   */\n  _runUpload (uploadID) {\n    const uploadData = this.getState().currentUploads[uploadID]\n    const fileIDs = uploadData.fileIDs\n    const restoreStep = uploadData.step\n\n    const steps = [\n      ...this.preProcessors,\n      ...this.uploaders,\n      ...this.postProcessors\n    ]\n    let lastStep = Promise.resolve()\n    steps.forEach((fn, step) => {\n      // Skip this step if we are restoring and have already completed this step before.\n      if (step < restoreStep) {\n        return\n      }\n\n      lastStep = lastStep.then(() => {\n        const { currentUploads } = this.getState()\n        const currentUpload = Object.assign({}, currentUploads[uploadID], {\n          step: step\n        })\n        this.setState({\n          currentUploads: Object.assign({}, currentUploads, {\n            [uploadID]: currentUpload\n          })\n        })\n        // TODO give this the `currentUpload` object as its only parameter maybe?\n        // Otherwise when more metadata may be added to the upload this would keep getting more parameters\n        return fn(fileIDs, uploadID)\n      }).then((result) => {\n        return null\n      })\n    })\n\n    // Not returning the `catch`ed promise, because we still want to return a rejected\n    // promise from this method if the upload failed.\n    lastStep.catch((err) => {\n      this.emit('error', err, uploadID)\n\n      this._removeUpload(uploadID)\n    })\n\n    return lastStep.then(() => {\n      const files = fileIDs.map((fileID) => this.getFile(fileID))\n      const successful = files.filter((file) => file && !file.error)\n      const failed = files.filter((file) => file && file.error)\n      this.addResultData(uploadID, { successful, failed, uploadID })\n\n      const { currentUploads } = this.getState()\n      if (!currentUploads[uploadID]) {\n        this.log(`Not setting result for an upload that has been removed: ${uploadID}`)\n        return\n      }\n\n      const result = currentUploads[uploadID].result\n      this.emit('complete', result)\n\n      this._removeUpload(uploadID)\n\n      return result\n    })\n  }\n\n  /**\n   * Start an upload for all the files that are not currently being uploaded.\n   *\n   * @return {Promise}\n   */\n  upload () {\n    if (!this.plugins.uploader) {\n      this.log('No uploader type plugins are used', 'warning')\n    }\n\n    let files = this.getState().files\n    const onBeforeUploadResult = this.opts.onBeforeUpload(files)\n\n    if (onBeforeUploadResult === false) {\n      return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'))\n    }\n\n    if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {\n      // warning after the change in 0.24\n      if (onBeforeUploadResult.then) {\n        throw new TypeError('onBeforeUpload() returned a Promise, but this is no longer supported. It must be synchronous.')\n      }\n\n      files = onBeforeUploadResult\n    }\n\n    return Promise.resolve()\n      .then(() => this._checkMinNumberOfFiles(files))\n      .then(() => {\n        const { currentUploads } = this.getState()\n        // get a list of files that are currently assigned to uploads\n        const currentlyUploadingFiles = Object.keys(currentUploads).reduce((prev, curr) => prev.concat(currentUploads[curr].fileIDs), [])\n\n        const waitingFileIDs = []\n        Object.keys(files).forEach((fileID) => {\n          const file = this.getFile(fileID)\n          // if the file hasn't started uploading and hasn't already been assigned to an upload..\n          if ((!file.progress.uploadStarted) && (currentlyUploadingFiles.indexOf(fileID) === -1)) {\n            waitingFileIDs.push(file.id)\n          }\n        })\n\n        const uploadID = this._createUpload(waitingFileIDs)\n        return this._runUpload(uploadID)\n      })\n      .catch((err) => {\n        const message = typeof err === 'object' ? err.message : err\n        this.log(message)\n        this.info(message, 'error', 4000)\n        return Promise.reject(typeof err === 'object' ? err : new Error(err))\n      })\n  }\n}\n\nmodule.exports = function (opts) {\n  return new Uppy(opts)\n}\n\n// Expose class constructor.\nmodule.exports.Uppy = Uppy\n"]}