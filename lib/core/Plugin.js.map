{"version":3,"sources":["../../src/core/Plugin.js"],"names":["preact","require","findDOMElement","module","exports","uppy","opts","update","bind","mount","install","uninstall","getPluginState","state","plugins","id","setPluginState","setState","el","updateUI","target","plugin","callerPluginName","targetElement","isTargetDOMEl","render","log","replaceTargetContent","innerHTML","targetPlugin","Plugin","Target","iteratePlugins","targetPluginName","addTarget","Error","unmount","parentNode","removeChild"],"mappings":"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","file":"Plugin.js","sourcesContent":["const preact = require('preact')\nconst { findDOMElement } = require('../core/Utils')\n\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\nmodule.exports = class Plugin {\n  constructor (uppy, opts) {\n    this.uppy = uppy\n    this.opts = opts || {}\n\n    this.update = this.update.bind(this)\n    this.mount = this.mount.bind(this)\n    this.install = this.install.bind(this)\n    this.uninstall = this.uninstall.bind(this)\n  }\n\n  getPluginState () {\n    return this.uppy.state.plugins[this.id]\n  }\n\n  setPluginState (update) {\n    const plugins = Object.assign({}, this.uppy.state.plugins)\n    plugins[this.id] = Object.assign({}, plugins[this.id], update)\n\n    this.uppy.setState({\n      plugins: plugins\n    })\n  }\n\n  update (state) {\n    if (typeof this.el === 'undefined') {\n      return\n    }\n\n    if (this.updateUI) {\n      this.updateUI(state)\n    }\n  }\n\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n  mount (target, plugin) {\n    const callerPluginName = plugin.id\n\n    const targetElement = findDOMElement(target)\n\n    if (targetElement) {\n      this.isTargetDOMEl = true\n\n      this.updateUI = (state) => {\n        this.el = preact.render(this.render(state), targetElement, this.el)\n      }\n\n      this.uppy.log(`Installing ${callerPluginName} to a DOM element`)\n\n      // clear everything inside the target container\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = ''\n      }\n\n      this.el = preact.render(this.render(this.uppy.state), targetElement)\n\n      return this.el\n    }\n\n    let targetPlugin\n    if (typeof target === 'object' && target instanceof Plugin) {\n      // Targeting a plugin *instance*\n      targetPlugin = target\n    } else if (typeof target === 'function') {\n      // Targeting a plugin type\n      const Target = target\n      // Find the target plugin instance.\n      this.uppy.iteratePlugins((plugin) => {\n        if (plugin instanceof Target) {\n          targetPlugin = plugin\n          return false\n        }\n      })\n    }\n\n    if (targetPlugin) {\n      const targetPluginName = targetPlugin.id\n      this.uppy.log(`Installing ${callerPluginName} to ${targetPluginName}`)\n      this.el = targetPlugin.addTarget(plugin)\n      return this.el\n    }\n\n    this.uppy.log(`Not installing ${callerPluginName}`)\n    throw new Error(`Invalid target option given to ${callerPluginName}`)\n  }\n\n  render (state) {\n    throw (new Error('Extend the render method to add your plugin to a DOM element'))\n  }\n\n  addTarget (plugin) {\n    throw (new Error('Extend the addTarget method to add your plugin to another plugin\\'s target'))\n  }\n\n  unmount () {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el)\n    }\n  }\n\n  install () {\n\n  }\n\n  uninstall () {\n    this.unmount()\n  }\n}\n"]}