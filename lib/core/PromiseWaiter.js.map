{"version":3,"sources":["../../src/core/PromiseWaiter.js"],"names":["module","exports","promises","add","promise","push","remove","then","index","indexOf","splice","wait","noop","concluded","all","map"],"mappings":";;;;AAAA;;;AAGAA,OAAOC,OAAP;AACE,2BAAe;AAAA;;AACb,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAHH,0BAKEC,GALF,gBAKOC,OALP,EAKgB;AAAA;;AACZ,SAAKF,QAAL,CAAcG,IAAd,CAAmBD,OAAnB;;AAEA,QAAME,SAAS,SAATA,MAAS,GAAM;AACnB,YAAKA,MAAL,CAAYF,OAAZ;AACD,KAFD;AAGAA,YAAQG,IAAR,CAAaD,MAAb,EAAqBA,MAArB;AACD,GAZH;;AAAA,0BAcEA,MAdF,mBAcUF,OAdV,EAcmB;AACf,QAAMI,QAAQ,KAAKN,QAAL,CAAcO,OAAd,CAAsBL,OAAtB,CAAd;AACA,QAAII,UAAU,CAAC,CAAf,EAAkB;AAChB,WAAKN,QAAL,CAAcQ,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACD;AACF,GAnBH;;AAAA,0BAqBEG,IArBF,mBAqBU;AACN,QAAMT,WAAW,KAAKA,QAAtB;AACA,SAAKA,QAAL,GAAgB,EAAhB;;AAEA,aAASU,IAAT,GAAiB,CAEhB;AADC;;;AAGF;AACA;AACA,aAASC,SAAT,CAAoBT,OAApB,EAA6B;AAC3B,aAAOA,QAAQG,IAAR,CAAaK,IAAb,EAAmBA,IAAnB,CAAP;AACD;;AAED,WAAO,SAAQE,GAAR,CAAYZ,SAASa,GAAT,CAAaF,SAAb,CAAZ,EAAqCN,IAArC,CAA0CK,IAA1C,CAAP;AACD,GApCH;;AAAA;AAAA","file":"PromiseWaiter.js","sourcesContent":["/**\n * Wait for multiple Promises to resolve.\n */\nmodule.exports = class PromiseWaiter {\n  constructor () {\n    this.promises = []\n  }\n\n  add (promise) {\n    this.promises.push(promise)\n\n    const remove = () => {\n      this.remove(promise)\n    }\n    promise.then(remove, remove)\n  }\n\n  remove (promise) {\n    const index = this.promises.indexOf(promise)\n    if (index !== -1) {\n      this.promises.splice(index, 1)\n    }\n  }\n\n  wait () {\n    const promises = this.promises\n    this.promises = []\n\n    function noop () {\n      // No result value\n    }\n\n    // Just wait for a Promise to conclude in some way, whether it's resolution\n    // or rejection. We don't care about the contents.\n    function concluded (promise) {\n      return promise.then(noop, noop)\n    }\n\n    return Promise.all(promises.map(concluded)).then(noop)\n  }\n}\n"]}